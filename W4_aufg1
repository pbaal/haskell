import Data.Array
aufteilen :: Int -> [(Int, Bool)]
aufteilen n = [(n, teste n)| n <- [5*n..5*5*5*5*5*5*n]]
			
teste n = if (mod n 5 == 1) --Startbedingung
	then if mod ((n-1) * 4 `div` 5) 5 == 1 --1. Seemann verteilt
	then if mod ((n-1) * 4 `div` 5) 5 == 1 --2. Seemann verteilt
  then if mod ((n-1) * 4 `div` 5 * 4 `div` 5) 5 == 1 --3. Seemann verteilt
	then if mod ((n-1) * 4 `div` 5 * 4 `div` 5 * 4 `div` 5) 5 == 1 --4. Seemann verteilt
	then if mod ((n-1) * 4 `div` 5 * 4 `div` 5 * 4 `div` 5 * 4 `div` 5) 5 == 1 --5. Seemann verteilt
	then if mod ((n-1) * 4 `div` 5 * 4 `div` 5 * 4 `div` 5 * 4 `div` 5 * 4 `div` 5) 5 == 0 --letzte Verteilung
  then True
	else False else False else False else False else False else False else False

auswerten :: [(Int, Bool)] -> (Int, Bool)
auswerten (x:xs)
	| snd x == True = x
	| snd x == False = auswerten xs
	| otherwise = auswerten xs
	
main = auswerten (aufteilen 1)
